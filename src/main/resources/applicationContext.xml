<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
		http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
		http://www.springframework.org/schema/mvc
		http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd
		http://www.springframework.org/schema/context
		http://www.springframework.org/schema/context/spring-context-4.0.xsd
		http://www.springframework.org/schema/aop
		http://www.springframework.org/schema/aop/spring-aop-4.0.xsd
		http://www.springframework.org/schema/tx
		http://www.springframework.org/schema/tx/spring-tx-4.0.xsd ">

    <context:component-scan base-package="com.partner.propertyms"/>

    <!-- 加载db.properties文件中的内容，db.properties文件中key命名要有一定的特殊规则 -->
    <context:property-placeholder location="classpath:db.properties" local-override="true"/>

    <!--创建连接池注入容器-->
    <bean class="com.alibaba.druid.pool.DruidDataSource" id="dataSource">
        <property name="url" value="${url}"></property>
        <property name="username" value="${username}"></property>
        <property name="password" value="${password}"></property>
        <property name="driverClassName" value="${driver}"></property>
    </bean>

    <!-- sqlSessionFactory -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <!-- 数据库连接池 -->
        <property name="dataSource" ref="dataSource" />
        <!-- 加载mybatis的全局配置文件 -->
        <property name="configLocation" value="classpath:SqlMapConfig.xml" />
    </bean>

    <!-- mapper扫描器 -->
    <bean class="tk.mybatis.spring.mapper.MapperScannerConfigurer">
        <!-- 扫描包路径，如果需要扫描多个包，中间使用半角逗号隔开 -->
        <property name="basePackage" value="com.partner.propertyms.mapper"></property>
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" />
    </bean>

    <!-- 事务管理器 对mybatis操作数据库事务控制，spring使用jdbc的事务控制类-->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>
    <!-- 通知 -->
    <tx:advice id="txAdvice" transaction-manager="transactionManager">
        <tx:attributes>
            <!-- 传播行为 -->
            <tx:method name="save*" propagation="REQUIRED"/>
            <tx:method name="delete*" propagation="REQUIRED"/>
            <tx:method name="insert*" propagation="REQUIRED"/>
            <tx:method name="update*" propagation="REQUIRED"/>
            <tx:method name="find*" propagation="SUPPORTS" read-only="true"/>
            <tx:method name="get*" propagation="SUPPORTS" read-only="true"/>
            <tx:method name="select*" propagation="SUPPORTS" read-only="true"/>
        </tx:attributes>
    </tx:advice>
    <!-- aop -->
    <aop:config>
        <aop:advisor advice-ref="txAdvice" pointcut="execution(* com.partner.propertyms.service.impl.*.*(..))"/>
    </aop:config>


    <!--整合shiro的配置内容-->
    <!--SecurityManager-->
<!--    <bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">-->
<!--        <property name="realm" ref="realm"/>-->
<!--    </bean>-->

<!--    &lt;!&ndash;创建自定义realm类对象&ndash;&gt;-->
<!--    <bean id="realm" class="com.partner.propertyms.realm.MyRealm">-->
<!--        <property name="credentialsMatcher" ref="credentialsMatcher"/>-->
<!--    </bean>-->

<!--    &lt;!&ndash;创建密码匹配器&ndash;&gt;-->
<!--    <bean id="credentialsMatcher" class="org.apache.shiro.authc.credential.HashedCredentialsMatcher">-->
<!--        <property name="hashAlgorithmName" value="MD5"/>-->
<!--        <property name="hashIterations" value="1024"/>-->
<!--    </bean>-->

<!--    &lt;!&ndash;shiro过滤工厂: 设置过滤的规则&ndash;&gt;-->
<!--    <bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">-->
<!--        <property name="securityManager" ref="securityManager"/>-->

<!--     &lt;!&ndash; 设置过滤器&ndash;&gt;-->
<!--        <property name="filterChainDefinitions">-->
<!--            <value>-->
<!--                &lt;!&ndash; 放行跳转到登录的方法  &ndash;&gt;-->
<!--                /login=anon-->
<!--                &lt;!&ndash; 其他的页面都需要认证 &ndash;&gt;-->
<!--                /**=authc-->
<!--            </value>-->
<!--        </property>-->

<!--&lt;!&ndash;   未登录过滤器&ndash;&gt;-->
<!--        <property name="filters">-->
<!--            <map>-->
<!--                <entry key="authc">-->
<!--&lt;!&ndash;                    自定义过滤器所在路径&ndash;&gt;-->
<!--                    <bean class="com.partner.eshop.utils.LoginFilter"/>-->
<!--                </entry>-->
<!--            </map>-->
<!--        </property>-->
<!--    </bean>-->
</beans>